name: 'Plan Infra'
description: 'Plan Terraform infrastructure'
inputs:
  app-name:
    description: 'The name of the application'
    # Not required for backwards compatibility
    required: false
    default: ''
  environment:
    description: 'The environment to deploy to'
    required: true
  aws-access-key-id:
    description: 'The AWS access key id'
    required: true
  aws-secret-access-key:
    description: 'The AWS secret access key'
    required: true
  aws-session-token:
    description: 'The AWS session token'
    required: false
  aws-region:
    description: 'The AWS region to deploy to'
    required: true
  grafana-api-key:
    description: 'The Grafana API Key'
    required: false
    default: ''
  cloudflare-api-key:
    description: 'The CloudFlare API Key'
    required: false
    default: ''
  onepassword-api-key:
    description: 'The OnePassword Connect API Key'
    required: false
    default: ''
  terraform-path:
    description: 'The path passed to Terraform e.g. -chdir=<terraform-path>'
    required: false
    default: 'terraform'
  needs-python:
    description: 'Whether Python is required'
    required: false
    default: 'false'
  python-version:
    description: 'The version of Python to use'
    required: false
    default: '3.9'
  ssh-key:
    description: 'SSH key to fetch private Terraform modules'
    required: false
    default: ''
  tfc_token:
    description: 'Terraform Cloud API Token'
    required: false
    default: ''
outputs:
  plan-file:
    description: "Plan File"
    value: ${{ steps.plan.outputs.plan-file }}
  output-file:
    description: "Human Readable plan of action"
    value: ${{ steps.plan.outputs.output-file }}
  plan:
    description: "Human Readable plan of action"
    value: ${{ steps.plan.outputs.stdout }}

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - uses: actions/setup-python@v5
      if: ${{ inputs.needs-python == 'true' }}
      with:
        python-version: ${{ inputs.python-version }}
      with:
        cli_config_credentials_token: ${{ inputs.tfc_token }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}
    - name: Get Grafana Details
      id: get-grafana-key
      if: ${{ inputs.app-name != '' }}
      env:
        APP_NAME: ${{ inputs.app-name }}
      shell: bash
      run: |
        WORKSPACE_ID=$(aws grafana list-workspaces | jq -r '.workspaces[] | select( .tags.Env == "prod") | .id')
        ENDPOINT=$(aws grafana list-workspaces | jq -r '.workspaces[] | select( .tags.Env == "prod") | .endpoint')
        KEY_NAME="$APP_NAME-$RANDOM"
        echo "Deploying with $KEY_NAME"
        KEY=$(aws grafana create-workspace-api-key --key-name "$KEY_NAME" --key-role "ADMIN" --seconds-to-live 300 --workspace-id "$WORKSPACE_ID" | jq -r .key)
        echo "::set-output name=endpoint::$ENDPOINT"
        echo "::set-output name=key::$KEY"
    - name: Setup SSH key
      if: ${{ inputs.ssh-key != '' }}
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh-key }}
    - name: Configure Terraform Variables
      shell: bash
      working-directory: ${{ inputs.terraform-path }}
      run: |
        # Mask the sensitive key output
        grafana_auth_key="${{ inputs.grafana-api-key != '' && inputs.grafana-api-key || steps.get-grafana-key.outputs.key }}"
        echo "::add-mask::$grafana_auth_key"
        
        # Append the key to the .auto.tfvars file
        echo "grafana_auth=\"$grafana_auth_key\"" >> "${{ inputs.environment }}.auto.tfvars"
    - name: Terraform Init
      id: init
      shell: bash
      working-directory: ${{ inputs.terraform-path }}
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare-api-key }}
        OP_CONNECT_TOKEN: ${{ inputs.onepassword-api-key }}
        TF_WORKSPACE: ${{ inputs.environment }}
        TF_INPUT: 0
      run: |
        VAR_FILE="vars/${{ inputs.environment }}.tfvars"
        if [ -f "$VAR_FILE" ]; then
          terraform init -no-color -var-file="$VAR_FILE" 
        else
          terraform init -no-color
        fi
    - name: Terraform Plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.terraform-path }}
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare-api-key }}
        OP_CONNECT_TOKEN: ${{ inputs.onepassword-api-key }}
        TF_WORKSPACE: ${{ inputs.environment }}
        TF_INPUT: 0
      run: |
        VAR_FILE="vars/${{ inputs.environment }}.tfvars"
        if [ -f "$VAR_FILE" ]; then
          terraform plan -no-color -out=/tmp/plan.tfplan -var-file="vars/${{ inputs.environment }}.tfvars"
        else
          terraform plan -no-color -out=/tmp/plan.tfplan
        fi
        echo "::set-output name=plan-file::/tmp/plan.tfplan"
        terraform show -no-color /tmp/plan.tfplan > /tmp/plan.txt
        echo "::set-output name=output-file::/tmp/plan.txt"
