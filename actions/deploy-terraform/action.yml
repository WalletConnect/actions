name: 'Deploy Infra'
description: 'Deploys Terraform infrastructure'
inputs:
  app-name:
    description: 'The name of the application'
    # Not required for backwards compatibility
    required: false
    default: ''
  environment:
    description: 'The environment to deploy to'
    required: true
  aws-access-key-id:
    description: 'The AWS access key id'
    required: true
  aws-secret-access-key:
    description: 'The AWS secret access key'
    required: true
  aws-region:
    description: 'The AWS region to deploy to'
    required: true
  grafana-api-key:
    description: 'The Grafana API Key'
    required: false
    default: ''
  grafana-endpoint:
    description: 'The Grafana Endpoint (without protocol e.g. https:// in front)'
    required: false
    default: ''
  terraform-path:
    description: 'The path passed to Terraform e.g. -chdir=<terraform-path>'
    required: false
    default: 'terraform'

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    - name: Get Grafana Details
      id: get-grafana-key
      if: ${{ inputs.app-name != '' }}
      env:
        APP_NAME: ${{ inputs.app-name }}
      shell: bash
      run: |
        WORKSPACE_ID=$(aws grafana list-workspaces | jq -r '.workspaces[] | select( .tags.Env == "prod") | .id')
        ENDPOINT=$(aws grafana list-workspaces | jq -r '.workspaces[] | select( .tags.Env == "prod") | .endpoint')
        KEY_NAME="$APP_NAME-$RANDOM"
        echo "Deploying with $KEY_NAME"
        KEY=$(aws grafana create-workspace-api-key --key-name "$KEY_NAME" --key-role "ADMIN" --seconds-to-live 300 --workspace-id "$WORKSPACE_ID" | jq -r .key)
        echo "::set-output name=endpoint::$ENDPOINT"
        echo "::set-output name=key::$KEY"
    - name: Terraform Init
      id: init
      shell: bash
      env:
        GRAFANA_AUTH: ${{ inputs.grafana-api-key != '' && inputs.grafana-api-key || steps.get-grafana-key.outputs.key }}
        TF_VAR_grafana_endpoint: ${{ inputs.grafana-endpoint != '' && inputs.grafana-endpoint || steps.get-grafana-key.outputs.endpoint }}
        TERRAFORM_PATH: ${{ inputs.terraform-path }}
      run: terraform -chdir=$TERRAFORM_PATH init -var-file="vars/${{ inputs.environment }}.tfvars" -no-color
    - name: Terraform Select Workspace
      id: workspace
      shell: bash
      env:
        GRAFANA_AUTH: ${{ inputs.grafana-api-key != '' && inputs.grafana-api-key || steps.get-grafana-key.outputs.key }}
        TF_VAR_grafana_endpoint: ${{ inputs.grafana-endpoint != '' && inputs.grafana-endpoint || steps.get-grafana-key.outputs.endpoint }}
        TERRAFORM_PATH: ${{ inputs.terraform-path }}
      run: terraform -chdir=$TERRAFORM_PATH workspace select ${{ inputs.environment }}
    - name: Terraform Apply
      id: apply
      shell: bash
      env:
        GRAFANA_AUTH: ${{ inputs.grafana-api-key != '' && inputs.grafana-api-key || steps.get-grafana-key.outputs.key }}
        TF_VAR_grafana_endpoint: ${{ inputs.grafana-endpoint != '' && inputs.grafana-endpoint || steps.get-grafana-key.outputs.endpoint }}
        TERRAFORM_PATH: ${{ inputs.terraform-path }}
      run: terraform -chdir=$TERRAFORM_PATH apply -var-file="vars/${{ inputs.environment }}.tfvars" -auto-approve -no-color
