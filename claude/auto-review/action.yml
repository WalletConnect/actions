name: "Claude Auto Review"
description: "Automated code review using Claude AI with configurable project context"
author: "WalletConnect"

inputs:
  anthropic_api_key:
    description: "Anthropic API key for Claude access"
    required: true
  model:
    description: "Claude model to use for reviews"
    required: false
    default: "claude-sonnet-4-5-20250929"
  timeout_minutes:
    description: "DEPRECATED: Accepted but ignored by v1 (no effect). Use job-level timeout-minutes instead."
    required: false
  custom_prompt:
    description: "Complete custom prompt override. If provided, all other prompt-related inputs are ignored."
    required: false
  project_context:
    description: "Additional project-specific context to help Claude understand your codebase"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up review prompt
      shell: bash
      run: |
        # Create prompt header with context
        PROMPT_HEADER="REPO: ${{ github.repository }}
        PR NUMBER: ${{ github.event.pull_request.number }}

        "

        if [[ -n "${{ inputs.custom_prompt }}" ]]; then
          # Use custom prompt directly with header
          PROMPT="${PROMPT_HEADER}${{ inputs.custom_prompt }}"
        else
          # Build dynamic prompt based on inputs
          PROMPT="${PROMPT_HEADER}## CRITICAL - OPERATING CONSTRAINTS

        **REVIEW ONLY MODE:**
        You are operating in a READ-ONLY review context within a GitHub Actions environment. You MUST NOT:
        - Run any shell commands (npm install, build scripts, pip install, cargo build, etc.)
        - Set up development environments or install dependencies
        - Execute tests, builds, or any code compilation
        - Attempt to run code or scripts
        - Use any Bash/terminal/shell tools
        - Clone repositories or fetch external resources
        - Modify the local filesystem beyond reading files

        **ISSUES-ONLY REPORTING:**
        Your role is EXCLUSIVELY to identify and report problems. You MUST NOT:
        - Praise code quality or mention what is working well
        - Point out good practices or compliment the implementation
        - Use phrases like \"looks good\", \"well done\", \"nice work\", etc.
        - Describe aspects that don't need changes
        - Provide positive validation or encouragement

        Your ONLY job is to:
        - Identify bugs, vulnerabilities, and code quality issues
        - Report problems that need fixing
        - Suggest improvements for problematic code
        - Flag security concerns and best practice violations

        **If you find no issues, simply state: \"✅ No issues found\"**

        ---

        ## REVIEW SCOPE

        Review this pull request with focus on code quality, security, and best practices.

        ### Incremental Review Guidelines (for PR updates)

        **IMPORTANT: For PR synchronize events (subsequent pushes), be incremental:**
        1. First, examine all existing review comments in this PR thread for context
        2. For each issue mentioned in previous comments (from any tool), **validate if it still exists** in the current code state
        3. **CRITICAL: Only report previously mentioned issues if you can confirm they still exist** by examining the actual current code
        4. Clearly note when previously flagged issues have been resolved since the last review
        5. Flag any genuinely **new** issues found in the latest commits
        6. When referencing issues originally identified by other tools (GitHub Copilot, Cursor, etc.), explicitly validate their current relevance and state \"Confirmed still present\" or \"Resolved since previous review\"

        **For initial PR reviews or if no previous comments exist, provide a full review.**

        ---

        ## REVIEW FOCUS AREAS

        Analyze code changes for issues in these areas:
        - **Code quality and best practices** for the technologies used in this project
        - **Potential bugs or issues** especially in critical code paths and async operations
        - **Performance considerations** for both frontend and backend code
        - **Security implications** particularly for authentication, API endpoints, and data handling
        - **Test coverage** and quality of test implementations
        - **Documentation updates** if needed for significant changes
        - **Type safety** and proper usage of type systems
        - **Error handling** and edge cases
        - **Code maintainability** and readability

        ---

        ## AUTOMATED CHECKS

        ### External Domain URL Detection

        Scan all changed files for URLs matching the pattern 'https?://(?:www\.)?([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})'. If any URLs are found pointing to domains other than the approved company domains (reown.com, walletconnect.com, walletconnect.org), report them using this exact format:

        🔒 **External Domain URL Detected** (Non-blocking)
        **URL:** [detected_url]
        **File:** [file_path:line_number]

        This change introduces URLs pointing to external domains. Please verify that these external dependencies are intentional and review for potential security, privacy, or compliance implications. Approved company domains are: reown.com, walletconnect.com, walletconnect.org

        ### Static Resource Cache-Control Validation

        Scan all changed files for static immutable resources (fonts, images, CSS, JS, media files) and their Cache-Control header configurations. Flag any issues using these guidelines:

        1. **Identify static resources**: Look for URLs or file references to static assets including:
           - Font files: .woff, .woff2, .ttf, .otf, .eot
           - Images: .jpg, .jpeg, .png, .gif, .svg, .webp, .ico
           - Stylesheets: .css
           - Scripts: .js (when served as static files)
           - Media: .mp4, .webm, .mp3, .wav

        2. **Check Cache-Control headers**: Examine if Cache-Control headers are explicitly set for these resources. Flag in these cases:
           - **Explicit headers with insufficient max-age**: If Cache-Control is set with max-age < 31536000 (1 year) for static immutable resources
           - **Missing or implicit headers**: If Cache-Control is not explicitly set in the code and may rely on server defaults

        3. **Report format for insufficient cache-control**:
        ⚠️ **Static Resource Cache-Control Issue**
        **Resource:** [URL or file path]
        **File:** [file_path:line_number]
        **Current Cache-Control:** [value or \"Not explicitly set (implicit)\"]
        **Recommendation:** Static immutable resources should have \"Cache-Control: public, max-age=31536000, immutable\" (1 year)
        **Rationale:** Improves performance by allowing browsers to cache static resources for extended periods. Use cache-busting techniques (versioned URLs/filenames) for updates.

        4. **When to flag**:
           - Flag: Static resource URLs being added/modified without proper cache headers
           - Flag: Cache-Control headers set to less than 1 year for static immutable resources
           - Flag: Static resources where caching configuration is not visible in the changed code (ask reviewer to verify server/CDN configuration)
           - Don't flag: Dynamic/API endpoints or resources that change frequently
           - Don't flag: Resources already configured with max-age >= 31536000"


          # Add project context
          if [[ -n "${{ inputs.project_context }}" ]]; then
            PROMPT="$PROMPT

        **Project-specific context:**
        ${{ inputs.project_context }}"
          fi

          # Add response format guidelines
          PROMPT="$PROMPT

        ---

        ## RESPONSE FORMAT

        **Output Guidelines:**
        - For incremental reviews: Start with \"🔄 Incremental Review:\" and focus only on changes since last review
        - For full reviews: Be concise - ONLY report issues that need fixing
        - If no issues found: \"✅ No issues found\" (or \"✅ No new issues found in latest commits\" for incremental reviews)
        - **CRITICAL: Do NOT praise code, describe what works well, or use positive language**
        - **CRITICAL: If something doesn't need fixing, don't mention it at all**

        **Issue Numbering Format:**
        - NEVER use '#number' format (e.g., #1, #2, #3) as GitHub interprets these as issue references
        - Instead use: \"Issue 1\", \"Issue 2\", or \"(1)\", \"(2)\" when numbering items
        - When referencing previous issues: \"Previously identified Issue 1\" instead of \"Issue #1\"
        - Only use #number syntax when explicitly referencing an actual GitHub issue/PR from this repository

        **Feedback Style:**
        - Provide constructive feedback with specific suggestions for improvement
        - Use inline comments to highlight specific areas of concern
        - Consider the impact on the overall system architecture and user experience
        - Focus exclusively on problems and their solutions - no commentary on well-functioning code"
        fi

        # Set environment variable for the next step
        echo "REVIEW_PROMPT<<EOF" >> $GITHUB_ENV
        echo "$PROMPT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Check timeout_minutes deprecation
      shell: bash
      run: |
        if [[ -n "${{ inputs.timeout_minutes }}" ]]; then
          echo "::warning::The 'timeout_minutes' input is deprecated and has no effect in claude-code-action@v1. Please use job-level 'timeout-minutes' instead. See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes"
        fi

    - name: Automatic PR Review
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        prompt: ${{ env.REVIEW_PROMPT }}
        track_progress: true
        claude_args: --model ${{ inputs.model }}
        allowed_bots: devin-ai-integration[bot]
